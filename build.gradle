//It all starts here
buildscript {
  repositories {
    mavenLocal()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.yakworks:gradle-plugins:$vShipyak"
    classpath "io.github.gradle-nexus:publish-plugin:$vMavenNexus"
  }
}

group = "org.yakworks"

//our opinionated defaults for gradle groovy & grails projects
apply plugin: 'yakworks.shipyak'
apply plugin: "io.github.gradle-nexus.publish-plugin"

if(!isSnapshot) {
  nexusPublishing {
    repositories {
      sonatype()
    }
  }
}

subprojects { subprj ->

  group = "org.yakworks"

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven {
      url "http://repo.9ci.com/oss-snapshots"
      allowInsecureProtocol = true
      mavenContent {
        snapshotsOnly()
      }
    }
  }
  // get prop with default if null, converts to boolean
  Closure getProp = { pname, defualtv -> (subprj.findProperty(pname) ?: defualtv).toBoolean() }

  ext { // see gradle.properties in sub-projects
    //default true for isGormLibrary and isPublishable, set to false in gradle.props
    isPublishable = getProp('isPublishable', true)
    isExample = getProp('isExample', false)
  }

  apply from: "${rootProject.projectDir}/gradle/compile.gradle"

  // if its a lib then setup gpg signing, see signing.gnupg.keyName
  if (isPublishable){
    apply from: "${rootProject.projectDir}/gradle/publish.gradle"
  }
  // if (isExample) {
  //   apply from: "${rootProject.projectDir}/gradle/example.gradle"
  // }

  apply from: "${rootProject.projectDir}/gradle/test-unit.gradle"

  configurations {
    //includes the compileOnly in tests too so we don't have to list twice
    testImplementation.extendsFrom compileOnly
    all {
      resolutionStrategy.cacheChangingModulesFor 1, 'seconds' //when changing = true this sets the cache time
    }
  }
}

ext.codenarcRuleset= '''
  // getRule('Println').enabled = false
  // getRule('AbcMetric').enabled = false
  getRule('FieldName').enabled = false
  getRule('SynchronizedMethod').enabled = false
'''
